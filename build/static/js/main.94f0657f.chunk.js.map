{"version":3,"sources":["loading.svg","utils/constants.js","components/TableFilter/TableFilter.js","components/PredictionTable/PredictionTable.js","components/CollegePredictor/CollegePredictor.js","utils/getData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","columns","title","property","style","width","data","TableFilter","value","updateFilters","length","id","name","onChange","e","target","className","map","d","key","PredictionTable","colleges","filters","setFilters","isLoading","val","newFilters","src","Loading","alt","col","span","college","index","institute","program","quota","category","seat","openingRank","closingRank","type","courseDuration","colSpan","CollegePredictor","useState","setColleges","rank","setRank","setLoading","exam","setExam","filterData","finalVal","dataFilters","Object","keys","forEach","filter","Array","includes","getFilteredColleges","Promise","resolve","_reject","filteredColleges","allData","getByCategory","setTimeout","filterColleges","then","useEffect","placeholder","parseInt","onClick","_e","rel","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94f0657f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.d698c692.svg\";","const categories = [\n  'OPEN',\n  'OPEN (PwD)',\n  'GEN-EWS',\n  'GEN-EWS(PwD)',\n  'OBC-NCL',\n  'OBC-NCL(PwD)',\n  'SC',\n  'SC (PwD)',\n  'ST',\n  'ST (PwD)',\n]\n\nconst quotas = [\n  'All',\n  'AI',\n  'HS',\n  'OS',\n  'AP',\n  'GO',\n]\n\nconst courseDuration = [\n  'All',\n  '4 Years',\n  '5 Years',\n]\n\nconst seatTypes = ['All', 'Gender-Neutral', 'Female-Only']\n\nconst columns = [\n  {\n    title: 'Institute name',\n    property: 'institute',\n    style: { width: '30%' },\n  },\n  {\n    title: 'Program',\n    property: 'program',\n    style: { width: '65%' },\n  },\n  {\n    title: 'Quota',\n    property: 'quota',\n    data: quotas,\n    style: { width: '5%' },\n  },\n  {\n    title: 'Categories',\n    property: 'category',\n    data: categories,\n    style: { width: '5%' },\n  },\n  {\n    title: 'Seat Type',\n    property: 'seat',\n    data: seatTypes,\n    style: { width: '5%' },\n  },\n  {\n    title: 'Opening Rank',\n    property: 'openingRank',\n    style: { width: '5%' },\n  },\n  {\n    title: 'Closing Rank',\n    property: 'closingRank',\n    style: { width: '5%' },\n  },\n  {\n    title: 'College Type',\n    property: 'type',\n    style: { width: '5%' },\n  },\n  {\n    title: 'Course Duration',\n    property: 'courseDuration',\n    data: courseDuration,\n    style: { width: '5%' },\n  },\n]\n\nexport { categories, seatTypes, columns }\n","import React from 'react'\n\nimport './TableFilter.css'\n\nconst TableFilter = ({\n  title, property, value, data, updateFilters,\n}) => (\n  <th>\n    {title}\n    {data?.length && (\n      <select\n        id={property}\n        name={title}\n        value={value}\n        onChange={(e) => updateFilters(property, e.target.value)}\n        className=\"table-filter\"\n      >\n        {data.map((d) => (\n          <option\n            key={d}\n            value={d}\n          >\n            {d}\n          </option>\n        ))}\n      </select>\n    )}\n  </th>\n)\n\nexport default TableFilter\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react'\n\nimport './PredictionTable.css'\nimport Loading from '../../loading.svg'\nimport { columns } from '../../utils/constants'\nimport TableFilter from '../TableFilter/TableFilter'\n\nconst PredictionTable = ({\n  colleges, filters,\n  setFilters, isLoading = true,\n}) => {\n  const updateFilters = (key, val) => {\n    const newFilters = {\n      ...filters,\n      [key]: val,\n    }\n    setFilters(newFilters)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <img\n          src={Loading}\n          alt=\"Loading\"\n        />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"college-table\">\n      <table>\n        <colgroup>\n          {columns.map((col) => (\n            <col\n              span=\"1\"\n              key={`col-span-${col.title}`}\n              style={col.style}\n            />\n          ))}\n        </colgroup>\n        <thead>\n          <tr>\n            {columns.map((col) => (\n              <TableFilter\n                title={col.title}\n                data={col.data}\n                property={col.property}\n                key={col.property}\n                value={filters[col.property]}\n                updateFilters={updateFilters}\n              />\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {colleges?.length ? (colleges).map((college, index) => (\n            <tr key={`${index}-${college.institute}`}>\n              <td title={college.institute}>\n                {college.institute}\n              </td>\n              <td title={college.program}>\n                {college.program}\n              </td>\n              <td title={college.quota}>\n                {college.quota}\n              </td>\n              <td title={college.category}>\n                {college.category}\n              </td>\n              <td title={college.seat}>\n                {college.seat}\n              </td>\n              <td title={college.openingRank}>\n                {college.openingRank}\n              </td>\n              <td title={college.closingRank}>\n                {college.closingRank}\n              </td>\n              <td title={college.type}>\n                {college.type}\n              </td>\n              <td title={college.courseDuration}>\n                {college.courseDuration}\n              </td>\n            </tr>\n          )) : (\n            <tr>\n              <td\n                className=\"none-found\"\n                colSpan={columns.length}\n              >\n                No Colleges found as per filters applied.\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default PredictionTable\n","/* eslint-disable no-bitwise */\nimport React, { useState, useEffect } from 'react'\n\nimport { getByCategory } from '../../utils/getData'\nimport PredictionTable from '../PredictionTable/PredictionTable'\nimport './CollegePredictor.css'\n\nconst CollegePredictor = () => {\n  const [colleges, setColleges] = useState([])\n  const [rank, setRank] = useState()\n  const [isLoading, setLoading] = useState(false)\n  const [exam, setExam] = useState('Advanced')\n  const [filters, setFilters] = useState({ category: 'OPEN' })\n\n  const filterData = (college) => {\n    let finalVal = rank <= college.closingRank\n    // This filter is hardcoded for IIT and Non-IIT\n    // eslint-disable-next-line no-param-reassign\n    const dataFilters = {\n      ...filters,\n      type: exam === 'Advanced' ? 'IIT' : ['IIT'],\n    }\n\n    Object.keys(dataFilters)\n      .forEach((filter) => {\n        // All means skip filter\n        if (dataFilters[filter] !== 'All') {\n          if (dataFilters[filter] instanceof Array) {\n            finalVal &= (!dataFilters[filter].includes(college[filter]))\n          } else {\n            finalVal &= (college[filter] === dataFilters[filter])\n          }\n        }\n      })\n    return finalVal\n  }\n\n  const getFilteredColleges = () => new Promise(((resolve, _reject) => {\n    const filteredColleges = getByCategory(filters.category)\n      .filter(filterData)\n\n    // using this to prevent 1 second lag, loading is better than lag\n    setTimeout(() => {\n      resolve(filteredColleges)\n    }, 1000)\n  }))\n\n  const filterColleges = () => {\n    setLoading(true)\n    getFilteredColleges().then((filteredColleges) => {\n      setColleges(filteredColleges)\n      setLoading(false)\n    })\n  }\n\n  useEffect(() => {\n    filterColleges()\n  }, [exam, filters])\n\n  return (\n    <>\n      <div className=\"filter-form\">\n        <div className=\"filter-form__inputs\">\n          JEE\n          <select\n            value={exam}\n            onChange={(e) => setExam(e.target.value)}\n            className=\"exam-type-select\"\n          >\n            <option\n              key=\"mains\"\n              value=\"Mains\"\n            >\n              Mains\n            </option>\n            <option\n              key=\"adv\"\n              value=\"Advanced\"\n            >\n              Advanced\n            </option>\n          </select>\n          Rank\n          <input\n            type=\"number\"\n            className=\"rank-input\"\n            placeholder=\"Enter your rank here\"\n            value={rank}\n            onChange={(e) => setRank(parseInt(e.target.value, 10))}\n          />\n          <button\n            type=\"button\"\n            onClick={(_e) => filterColleges()}\n            className=\"submit-btn\"\n          >\n            Get Predictions\n          </button>\n        </div>\n        <div className=\"dev-links\">\n          Made in Rajasthan by\n          &nbsp;\n          <a\n            className=\"dev-link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/2AMDevs/no-bs-college-predictor/\"\n          >\n            2AM Devs\n          </a>\n        </div>\n      </div>\n      <PredictionTable\n        colleges={colleges}\n        filters={filters}\n        setFilters={setFilters}\n        isLoading={isLoading}\n      />\n    </>\n  )\n}\n\nexport default CollegePredictor\n","import allData from './dataSources/categoricalData.json'\n\nconst getByCategory = (category = 'OPEN') => allData[category]\nconst everything = 42\n\nexport { getByCategory, everything }\n","import React from 'react'\n\nimport './App.css'\nimport CollegePredictor from './components/CollegePredictor/CollegePredictor'\n\nconst App = () => (\n  <div className=\"app\">\n    <CollegePredictor />\n  </div>\n)\n\nexport default App\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}